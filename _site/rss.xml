<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Xin Zhao</title>
        <description>Xin Zhao - Xin Zhao</description>
        <link>http://zhaox.github.io</link>
        <link>http://zhaox.github.io</link>
        <lastBuildDate>2014-04-29T15:51:06+08:00</lastBuildDate>
        <pubDate>2014-04-29T15:51:06+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Java 8的新并行API - 魅力与炫目背后</title>
                <description>&lt;p&gt;&lt;em&gt;这是一篇译文，原文链接见&lt;a href=&quot;http://www.takipiblog.com/2014/04/03/new-parallelism-apis-in-java-8-behind-the-glitz-and-glamour&quot;&gt;这里&lt;/a&gt;。&lt;/em&gt;
&lt;em&gt;本文同时发表在&lt;a href=&quot;http://www.importnew.com&quot;&gt;ImportNew&lt;/a&gt;上，转载请注明出处。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.takipiblog.com/wp-content/uploads/2014/04/Blog_socks03.png&quot; alt=&quot;图片1&quot;&gt;&lt;/p&gt;

&lt;p&gt;我很擅长同时处理多项任务。就算是在写这篇博客的此刻，我仍然在为昨天在聚会上发表了一个让大家都感到诧异的评论而觉得尴尬。好吧，好消息是我并不孤单——Java 8在多任务处理方面同样很优秀。让我们来看看它是怎么做的。&lt;/p&gt;

&lt;p&gt;在Java 8引入的新功能中，有很重要的一项是并行数组处理。这项新功能使得我们能够使用可以利用多核体系结构的Lambda表达式来对对数组的元素进行排序，过滤和分组。这里的重点是，Java程序员只需要非常少的工作就可以立刻使程序的性能获得提升。非常酷。&lt;/p&gt;

&lt;p&gt;问题来了。这项新功能有多快？我应该什么时候使用它？好吧，答案有点让人沮丧——这依赖于具体的情况。要知道依赖什么情况吗？请继续阅读。&lt;/p&gt;

&lt;h2&gt;新的API&lt;/h2&gt;

&lt;p&gt;Java8的新并行操作API十分灵活。让我们一起看几个我们要用来做测试的例子。&lt;/p&gt;

&lt;h3&gt;1. 使用多核对数组进行&lt;strong&gt;排序&lt;/strong&gt;：&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. 根据特定的条件（比如：素数和非素数）对数组进行&lt;strong&gt;分组&lt;/strong&gt;：&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupByPrimary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Utility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. 对数组进行&lt;strong&gt;过滤&lt;/strong&gt;：&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;prims&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallelStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Utility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟自己写多线程程序来实现相同的功能比较，生产力提高太多了！在这个新的体系中，我个人最喜欢的是一个叫&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Spliterator.html&quot;&gt;Spliterator&lt;/a&gt;的新概念，将一个集合分成多个块，并行处理这多个块并将处理结果汇合到一起。就像它的哥哥iterator，它也被用来遍历一个集合的元素，只不过它更加灵活，允许你编写检查和分离集合的自定义行为，并在遍历时直接插入。&lt;/p&gt;

&lt;h2&gt;它的性能如何？&lt;/h2&gt;

&lt;p&gt;为了测试这些并行操作API的性能， 我在两种情况（低竞争和高竞争）下进行了实验。原因是单独运行一个多核算法，往往会有好的性能，但在真实的服务器环境中运行，情况就完全不同了。真实环境中往往有大量的线程在竞争宝贵的CPU时间片以处理消息或用户请求，由于竞争的存在，程序的性能就降低了。所以我进行了&lt;a href=&quot;https://github.com/takipi/java-8-parallelism-benchmarks&quot;&gt;接下来的测试&lt;/a&gt;。我首先随机生成了长度为100K的整数数组，这些整数的取值在0到1百万之间。然后我分别使用传统的顺序方法和新的Java 8的并行API对这个数组进行了排序，分组和过滤。结果并不使人惊讶。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速排序&lt;/strong&gt;快了&lt;strong&gt;4.7&lt;/strong&gt;倍&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分组&lt;/strong&gt;快了&lt;strong&gt;5&lt;/strong&gt;倍&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤&lt;/strong&gt;快了&lt;strong&gt;5.5&lt;/strong&gt;倍&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这可以说明java 8的并行API具有非常好的性能吗？很不幸，不能。
&lt;img src=&quot;http://www.takipiblog.com/wp-content/uploads/2014/04/table2.png&quot; alt=&quot;测试结果1&quot;&gt;
*测试结果与运行了100次的&lt;a href=&quot;https://docs.google.com/file/d/0B8Q1A5m63do8OU1GNjVmM19FVU0/edit&quot;&gt;附加测试&lt;/a&gt;结果一致。
*测试机器为MBP，i7四核。&lt;/p&gt;

&lt;h2&gt;在有负载的情况下会发生什么呢？&lt;/h2&gt;

&lt;p&gt;目前为止新API的性能表现非常出色，原因是线程之间对CPU的时间片的竞争非常少。这是理想的环境，但不行的是，理想环境往往不会出现在现实环境中。为了模拟真实的环境，我建立了第二个测试。这次测试使用跟第一次相同的算法，但测试任务在十个并发线程上执行，以模拟处在压力环境中的服务器同时处理十个请求的情况。这十个请求使用传统的顺利处理方法或Java 8的新API处理。&lt;/p&gt;

&lt;h2&gt;测试结果&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排序&lt;/strong&gt;现在只快了20%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过滤&lt;/strong&gt;现在只快了20%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分组&lt;/strong&gt;现在满了15%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更高的规模和竞争水平很可能使这些数字进一步下降。原因是在一个多线程的环境中添加线程并不一定能帮助你提高计算效率，是计算机的CPU个数决定了计算效率，而不是线程个数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.takipiblog.com/wp-content/uploads/2014/04/unnamed.png&quot; alt=&quot;测试结果2&quot;&gt;&lt;/p&gt;

&lt;h2&gt;结论&lt;/h2&gt;

&lt;p&gt;虽然这些都是非常强大和易于使用的API，但它们不是银弹。我们仍然需要花费精力去判断何时应该使用它们。如果你事先知道你会做多个处理并行操作，那么考虑使用排队架构，并使并发操作数和你的处理器数量相匹配可能是一个好主意。这里的难点在于运行时性能将依赖于实际的硬件体系结构和服务器所处的压力情况。你可能只有在压力测试或者生产环境中才能看到代码的运行时性能，使之成为一个“易编码，难调试”的经典案例。&lt;/p&gt;
</description>
                <link>http://zhaox.github.io/translations/2014/04/28/java8-New-Parallelism-APIs</link>
                <guid>http://zhaox.github.io/translations/2014/04/28/java8-New-Parallelism-APIs</guid>
                <pubDate>2014-04-28T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
